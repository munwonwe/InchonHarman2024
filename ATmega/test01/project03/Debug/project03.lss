
project03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002bc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800112  00800112  00000362  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a83  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090f  00000000  00000000  00000e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003df  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000462  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002df  00000000  00000000  000020c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000023a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec eb       	ldi	r30, 0xBC	; 188
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ca d0       	rcall	.+404    	; 0x258 <main>
  c4:	f9 c0       	rjmp	.+498    	; 0x2b8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_init>:
uint8_t digit[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67, 0x77, 0x7c, 0x58, 0x5e, 0x79, 0x71, 0x00};
char arr[5];

void ADC_init(unsigned char channel)
{
	ADMUX |= (1 << REFS0);
  c8:	97 b1       	in	r25, 0x07	; 7
  ca:	90 64       	ori	r25, 0x40	; 64
  cc:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA |= 0x07;
  ce:	96 b1       	in	r25, 0x06	; 6
  d0:	97 60       	ori	r25, 0x07	; 7
  d2:	96 b9       	out	0x06, r25	; 6
	
	ADCSRA |= (1 << ADEN);
  d4:	96 b1       	in	r25, 0x06	; 6
  d6:	90 68       	ori	r25, 0x80	; 128
  d8:	96 b9       	out	0x06, r25	; 6
	ADCSRA |= (1 << ADFR);
  da:	96 b1       	in	r25, 0x06	; 6
  dc:	90 62       	ori	r25, 0x20	; 32
  de:	96 b9       	out	0x06, r25	; 6
	
	ADMUX = ((ADMUX & 0xE0) | channel);
  e0:	97 b1       	in	r25, 0x07	; 7
  e2:	90 7e       	andi	r25, 0xE0	; 224
  e4:	89 2b       	or	r24, r25
  e6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
  e8:	86 b1       	in	r24, 0x06	; 6
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	86 b9       	out	0x06, r24	; 6
  ee:	08 95       	ret

000000f0 <read_ADC>:
}

int read_ADC(void)
{
	while (!(ADCSRA & (1 << ADIF))); // Conversion 완료 기다림
  f0:	34 9b       	sbis	0x06, 4	; 6
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <read_ADC>
	ADCSRA |= (1 << ADIF); // ADIF 플래그 클리어
  f4:	86 b1       	in	r24, 0x06	; 6
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	86 b9       	out	0x06, r24	; 6
	return ADC;
  fa:	84 b1       	in	r24, 0x04	; 4
  fc:	95 b1       	in	r25, 0x05	; 5
}
  fe:	08 95       	ret

00000100 <seg>:

void seg(unsigned long sel, uint8_t c)
{
	PORTC |= 0x0F; // 모든 선택 핀을 끔
 100:	85 b3       	in	r24, 0x15	; 21
 102:	8f 60       	ori	r24, 0x0F	; 15
 104:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1 << sel); // 선택 핀 켜기
 106:	25 b3       	in	r18, 0x15	; 21
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <seg+0x12>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <seg+0xe>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	85 bb       	out	0x15, r24	; 21
	PORTD = c; // 데이터 핀에 값 출력
 11c:	42 bb       	out	0x12, r20	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	8f e1       	ldi	r24, 0x1F	; 31
 120:	9e e4       	ldi	r25, 0x4E	; 78
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <seg+0x22>
 126:	00 c0       	rjmp	.+0      	; 0x128 <seg+0x28>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <FND_4>:
	_delay_ms(5); // 잠깐 대기
}

void FND_4(char *inf)
{
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	8c 01       	movw	r16, r24
	for (int i = 0; i < 4; i++)
 136:	c0 e0       	ldi	r28, 0x00	; 0
 138:	d0 e0       	ldi	r29, 0x00	; 0
 13a:	0b c0       	rjmp	.+22     	; 0x152 <FND_4+0x26>
	{
		seg(i, *(inf + i));
 13c:	f8 01       	movw	r30, r16
 13e:	ec 0f       	add	r30, r28
 140:	fd 1f       	adc	r31, r29
 142:	be 01       	movw	r22, r28
 144:	0d 2e       	mov	r0, r29
 146:	00 0c       	add	r0, r0
 148:	88 0b       	sbc	r24, r24
 14a:	99 0b       	sbc	r25, r25
 14c:	40 81       	ld	r20, Z
 14e:	d8 df       	rcall	.-80     	; 0x100 <seg>
	_delay_ms(5); // 잠깐 대기
}

void FND_4(char *inf)
{
	for (int i = 0; i < 4; i++)
 150:	21 96       	adiw	r28, 0x01	; 1
 152:	c4 30       	cpi	r28, 0x04	; 4
 154:	d1 05       	cpc	r29, r1
 156:	94 f3       	brlt	.-28     	; 0x13c <FND_4+0x10>
	{
		seg(i, *(inf + i));
	}
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	08 95       	ret

00000162 <SegDisp>:

char* SegDisp(unsigned long num)
{
 162:	4f 92       	push	r4
 164:	5f 92       	push	r5
 166:	6f 92       	push	r6
 168:	7f 92       	push	r7
 16a:	8f 92       	push	r8
 16c:	9f 92       	push	r9
 16e:	af 92       	push	r10
 170:	bf 92       	push	r11
 172:	cf 92       	push	r12
 174:	df 92       	push	r13
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	6b 01       	movw	r12, r22
 184:	7c 01       	movw	r14, r24
	int n1 = num % 10;
 186:	0f 2e       	mov	r0, r31
 188:	fa e0       	ldi	r31, 0x0A	; 10
 18a:	4f 2e       	mov	r4, r31
 18c:	51 2c       	mov	r5, r1
 18e:	61 2c       	mov	r6, r1
 190:	71 2c       	mov	r7, r1
 192:	f0 2d       	mov	r31, r0
 194:	a3 01       	movw	r20, r6
 196:	92 01       	movw	r18, r4
 198:	6d d0       	rcall	.+218    	; 0x274 <__udivmodsi4>
 19a:	4b 01       	movw	r8, r22
 19c:	5c 01       	movw	r10, r24
	int n2 = (num / 10) % 10;
 19e:	ca 01       	movw	r24, r20
 1a0:	b9 01       	movw	r22, r18
 1a2:	a3 01       	movw	r20, r6
 1a4:	92 01       	movw	r18, r4
 1a6:	66 d0       	rcall	.+204    	; 0x274 <__udivmodsi4>
 1a8:	eb 01       	movw	r28, r22
	int n3 = (num / 100) % 10;
 1aa:	c7 01       	movw	r24, r14
 1ac:	b6 01       	movw	r22, r12
 1ae:	24 e6       	ldi	r18, 0x64	; 100
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	5e d0       	rcall	.+188    	; 0x274 <__udivmodsi4>
 1b8:	ca 01       	movw	r24, r20
 1ba:	b9 01       	movw	r22, r18
 1bc:	a3 01       	movw	r20, r6
 1be:	92 01       	movw	r18, r4
 1c0:	59 d0       	rcall	.+178    	; 0x274 <__udivmodsi4>
 1c2:	8b 01       	movw	r16, r22
	int n4 = (num / 1000);
 1c4:	c7 01       	movw	r24, r14
 1c6:	b6 01       	movw	r22, r12
 1c8:	28 ee       	ldi	r18, 0xE8	; 232
 1ca:	33 e0       	ldi	r19, 0x03	; 3
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	51 d0       	rcall	.+162    	; 0x274 <__udivmodsi4>
	
	if(!(num / 1000))
 1d2:	88 ee       	ldi	r24, 0xE8	; 232
 1d4:	c8 16       	cp	r12, r24
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	d8 06       	cpc	r13, r24
 1da:	e1 04       	cpc	r14, r1
 1dc:	f1 04       	cpc	r15, r1
 1de:	10 f4       	brcc	.+4      	; 0x1e4 <SegDisp+0x82>
	{
		n4 = 16;
 1e0:	20 e1       	ldi	r18, 0x10	; 16
 1e2:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	if(!(num / 100))
 1e4:	84 e6       	ldi	r24, 0x64	; 100
 1e6:	c8 16       	cp	r12, r24
 1e8:	d1 04       	cpc	r13, r1
 1ea:	e1 04       	cpc	r14, r1
 1ec:	f1 04       	cpc	r15, r1
 1ee:	10 f4       	brcc	.+4      	; 0x1f4 <SegDisp+0x92>
	{
		n3 = 16;
 1f0:	00 e1       	ldi	r16, 0x10	; 16
 1f2:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	if(!(num /10))
 1f4:	8a e0       	ldi	r24, 0x0A	; 10
 1f6:	c8 16       	cp	r12, r24
 1f8:	d1 04       	cpc	r13, r1
 1fa:	e1 04       	cpc	r14, r1
 1fc:	f1 04       	cpc	r15, r1
 1fe:	10 f4       	brcc	.+4      	; 0x204 <SegDisp+0xa2>
	{
		n2 = 16;
 200:	c0 e1       	ldi	r28, 0x10	; 16
 202:	d0 e0       	ldi	r29, 0x00	; 0
	if(num>9999)
	{
		num = 0;
	}

	arr[0] = digit[n4];
 204:	f9 01       	movw	r30, r18
 206:	e0 50       	subi	r30, 0x00	; 0
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	80 81       	ld	r24, Z
 20c:	e2 e1       	ldi	r30, 0x12	; 18
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	80 83       	st	Z, r24
	arr[1] = digit[n3];
 212:	d8 01       	movw	r26, r16
 214:	a0 50       	subi	r26, 0x00	; 0
 216:	bf 4f       	sbci	r27, 0xFF	; 255
 218:	8c 91       	ld	r24, X
 21a:	81 83       	std	Z+1, r24	; 0x01
	arr[2] = digit[n2];
 21c:	c0 50       	subi	r28, 0x00	; 0
 21e:	df 4f       	sbci	r29, 0xFF	; 255
 220:	88 81       	ld	r24, Y
 222:	82 83       	std	Z+2, r24	; 0x02
	arr[3] = digit[n1];
 224:	d4 01       	movw	r26, r8
 226:	a0 50       	subi	r26, 0x00	; 0
 228:	bf 4f       	sbci	r27, 0xFF	; 255
 22a:	8c 91       	ld	r24, X

	FND_4(arr);
 22c:	83 83       	std	Z+3, r24	; 0x03
 22e:	cf 01       	movw	r24, r30
 230:	7d df       	rcall	.-262    	; 0x12c <FND_4>
	return arr;
 232:	82 e1       	ldi	r24, 0x12	; 18
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	df 90       	pop	r13
 244:	cf 90       	pop	r12
 246:	bf 90       	pop	r11
 248:	af 90       	pop	r10
 24a:	9f 90       	pop	r9
 24c:	8f 90       	pop	r8
 24e:	7f 90       	pop	r7
 250:	6f 90       	pop	r6
 252:	5f 90       	pop	r5
 254:	4f 90       	pop	r4
 256:	08 95       	ret

00000258 <main>:

int main()
{
	int read;

	DDRB = 0xFF;
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	87 bb       	out	0x17, r24	; 23
	
	DDRD = 0xFF; // PORTD 출력으로 설정
 25c:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F; // PORTC 하위 4비트를 출력으로 설정
 25e:	8f e0       	ldi	r24, 0x0F	; 15
 260:	84 bb       	out	0x14, r24	; 20

	ADC_init(0); //ADC 초기화 및 0번 채널 설정
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	31 df       	rcall	.-414    	; 0xc8 <ADC_init>

	while (1)
	{
		read = read_ADC();
 266:	44 df       	rcall	.-376    	; 0xf0 <read_ADC>
 268:	bc 01       	movw	r22, r24
		SegDisp(read);
 26a:	99 0f       	add	r25, r25
 26c:	88 0b       	sbc	r24, r24
 26e:	99 0b       	sbc	r25, r25
 270:	78 df       	rcall	.-272    	; 0x162 <SegDisp>
 272:	f9 cf       	rjmp	.-14     	; 0x266 <main+0xe>

00000274 <__udivmodsi4>:
 274:	a1 e2       	ldi	r26, 0x21	; 33
 276:	1a 2e       	mov	r1, r26
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	fd 01       	movw	r30, r26
 27e:	0d c0       	rjmp	.+26     	; 0x29a <__udivmodsi4_ep>

00000280 <__udivmodsi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	ee 1f       	adc	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	a2 17       	cp	r26, r18
 28a:	b3 07       	cpc	r27, r19
 28c:	e4 07       	cpc	r30, r20
 28e:	f5 07       	cpc	r31, r21
 290:	20 f0       	brcs	.+8      	; 0x29a <__udivmodsi4_ep>
 292:	a2 1b       	sub	r26, r18
 294:	b3 0b       	sbc	r27, r19
 296:	e4 0b       	sbc	r30, r20
 298:	f5 0b       	sbc	r31, r21

0000029a <__udivmodsi4_ep>:
 29a:	66 1f       	adc	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	88 1f       	adc	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	1a 94       	dec	r1
 2a4:	69 f7       	brne	.-38     	; 0x280 <__udivmodsi4_loop>
 2a6:	60 95       	com	r22
 2a8:	70 95       	com	r23
 2aa:	80 95       	com	r24
 2ac:	90 95       	com	r25
 2ae:	9b 01       	movw	r18, r22
 2b0:	ac 01       	movw	r20, r24
 2b2:	bd 01       	movw	r22, r26
 2b4:	cf 01       	movw	r24, r30
 2b6:	08 95       	ret

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
